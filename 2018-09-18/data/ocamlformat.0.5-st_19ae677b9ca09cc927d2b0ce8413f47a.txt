The following actions will be performed:
  - install ocamlformat 0.5

=-=- Gathering sources =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
[ocamlformat: http] Command started
[ocamlformat: http] Command started
[ocamlformat.0.5] https://github.com/ocaml-ppx/ocamlformat/archive/0.5.tar.gz downloaded

=-=- Processing actions -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
[ocamlformat: jbuilder build] Command started
+ jbuilder "build" "-p" "ocamlformat" "-j" "4" (CWD=/home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/build/ocamlformat.0.5)
-       ocamlc src/import/.import.objs/Import.{cmi,cmti} (exit 2)
- (cd _build/default && /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/bin/ocamlc.opt -strict-formats -strict-sequence -principal -w +a-3-4-6-9-40-41-42-44-45-48@50 -short-paths -bin-annot -keep-docs -unboxed-types -noassert -bin-annot -I src/import/.import.objs -I /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/lib/base -I /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/lib/base/caml -I /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/lib/base/shadow_stdlib -I /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/lib/sexplib0 -I /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/lib/stdio -no-alias-deps -o src/import/.import.objs/Import.cmi -c -intf src/import/Import.mli)
- File "src/import/Import.mli", line 16, characters 4-137:
- Error: In this `with' constraint, the new definition of Format
-        does not match its original definition in the constrained signature:
-        Modules do not match:
-          sig
-            type formatter = Format.formatter
-            val pp_open_box : formatter -> int -> unit
-            val open_box : int -> unit
-            val pp_close_box : formatter -> unit -> unit
-            val close_box : unit -> unit
-            val pp_open_hbox : formatter -> unit -> unit
-            val open_hbox : unit -> unit
-            val pp_open_vbox : formatter -> int -> unit
-            val open_vbox : int -> unit
-            val pp_open_hvbox : formatter -> int -> unit
-            val open_hvbox : int -> unit
-            val pp_open_hovbox : formatter -> int -> unit
-            val open_hovbox : int -> unit
-            val pp_print_string : formatter -> string -> unit
-            val print_string : string -> unit
-            val pp_print_as : formatter -> int -> string -> unit
-            val print_as : int -> string -> unit
-            val pp_print_int : formatter -> int -> unit
-            val print_int : int -> unit
-            val pp_print_float : formatter -> float -> unit
-            val print_float : float -> unit
-            val pp_print_char : formatter -> char -> unit
-            val print_char : char -> unit
-            val pp_print_bool : formatter -> bool -> unit
-            val print_bool : bool -> unit
-            val pp_print_space : formatter -> unit -> unit
-            val print_space : unit -> unit
-            val pp_print_cut : formatter -> unit -> unit
-            val print_cut : unit -> unit
-            val pp_print_break : formatter -> int -> int -> unit
-            val print_break : int -> int -> unit
-            val pp_force_newline : formatter -> unit -> unit
-            val force_newline : unit -> unit
-            val pp_print_if_newline : formatter -> unit -> unit
-            val print_if_newline : unit -> unit
-            val pp_print_flush : formatter -> unit -> unit
-            val print_flush : unit -> unit
-            val pp_print_newline : formatter -> unit -> unit
-            val print_newline : unit -> unit
-            val pp_set_margin : formatter -> int -> unit
-            val set_margin : int -> unit
-            val pp_get_margin : formatter -> unit -> int
-            val get_margin : unit -> int
-            val pp_set_max_indent : formatter -> int -> unit
-            val set_max_indent : int -> unit
-            val pp_get_max_indent : formatter -> unit -> int
-            val get_max_indent : unit -> int
-            val pp_set_max_boxes : formatter -> int -> unit
-            val set_max_boxes : int -> unit
-            val pp_get_max_boxes : formatter -> unit -> int
-            val get_max_boxes : unit -> int
-            val pp_over_max_boxes : formatter -> unit -> bool
-            val over_max_boxes : unit -> bool
-            val pp_open_tbox : formatter -> unit -> unit
-            val open_tbox : unit -> unit
-            val pp_close_tbox : formatter -> unit -> unit
-            val close_tbox : unit -> unit
-            val pp_set_tab : formatter -> unit -> unit
-            val set_tab : unit -> unit
-            val pp_print_tab : formatter -> unit -> unit
-            val print_tab : unit -> unit
-            val pp_print_tbreak : formatter -> int -> int -> unit
-            val print_tbreak : int -> int -> unit
-            val pp_set_ellipsis_text : formatter -> string -> unit
-            val set_ellipsis_text : string -> unit
-            val pp_get_ellipsis_text : formatter -> unit -> string
-            val get_ellipsis_text : unit -> string
-            type tag = string
-            val pp_open_tag : formatter -> tag -> unit
-            val open_tag : tag -> unit
-            val pp_close_tag : formatter -> unit -> unit
-            val close_tag : unit -> unit
-            val pp_set_tags : formatter -> bool -> unit
-            val set_tags : bool -> unit
-            val pp_set_print_tags : formatter -> bool -> unit
-            val set_print_tags : bool -> unit
-            val pp_set_mark_tags : formatter -> bool -> unit
-            val set_mark_tags : bool -> unit
-            val pp_get_print_tags : formatter -> unit -> bool
-            val get_print_tags : unit -> bool
-            val pp_get_mark_tags : formatter -> unit -> bool
-            val get_mark_tags : unit -> bool
-            val pp_set_formatter_out_channel :
-              formatter -> out_channel -> unit
-            val set_formatter_out_channel : out_channel -> unit
-            val pp_set_formatter_output_functions :
-              formatter ->
-              (tag -> int -> int -> unit) -> (unit -> unit) -> unit
-            val set_formatter_output_functions :
-              (tag -> int -> int -> unit) -> (unit -> unit) -> unit
-            val pp_get_formatter_output_functions :
-              formatter ->
-              unit -> (tag -> int -> int -> unit) * (unit -> unit)
-            val get_formatter_output_functions :
-              unit -> (tag -> int -> int -> unit) * (unit -> unit)
-            type formatter_out_functions =
-              Format.formatter_out_functions = {
-              out_string : tag -> int -> int -> unit;
-              out_flush : unit -> unit;
-              out_newline : unit -> unit;
-              out_spaces : int -> unit;
-              out_indent : int -> unit;
-            }
-            val pp_set_formatter_out_functions :
-              formatter -> formatter_out_functions -> unit
-            val set_formatter_out_functions : formatter_out_functions -> unit
-            val pp_get_formatter_out_functions :
-              formatter -> unit -> formatter_out_functions
-            val get_formatter_out_functions : unit -> formatter_out_functions
-            type formatter_tag_functions =
-              Format.formatter_tag_functions = {
-              mark_open_tag : tag -> tag;
-              mark_close_tag : tag -> tag;
-              print_open_tag : tag -> unit;
-              print_close_tag : tag -> unit;
-            }
-            val pp_set_formatter_tag_functions :
-              formatter -> formatter_tag_functions -> unit
-            val set_formatter_tag_functions : formatter_tag_functions -> unit
-            val pp_get_formatter_tag_functions :
-              formatter -> unit -> formatter_tag_functions
-            val get_formatter_tag_functions : unit -> formatter_tag_functions
-            val formatter_of_out_channel : out_channel -> formatter
-            val std_formatter : formatter
-            val err_formatter : formatter
-            val formatter_of_buffer : Buffer.t -> formatter
-            val stdbuf : Buffer.t
-            val str_formatter : formatter
-            val flush_str_formatter : unit -> tag
-            val make_formatter :
-              (tag -> int -> int -> unit) -> (unit -> unit) -> formatter
-            val formatter_of_out_functions :
-              formatter_out_functions -> formatter
-            type symbolic_output_item =
-              Format.symbolic_output_item =
-                Output_flush
-              | Output_newline
-              | Output_string of tag
-              | Output_spaces of int
-              | Output_indent of int
-            type symbolic_output_buffer = Format.symbolic_output_buffer
-            val make_symbolic_output_buffer : unit -> symbolic_output_buffer
-            val clear_symbolic_output_buffer : symbolic_output_buffer -> unit
-            val get_symbolic_output_buffer :
-              symbolic_output_buffer -> symbolic_output_item list
-            val flush_symbolic_output_buffer :
-              symbolic_output_buffer -> symbolic_output_item list
-            val add_symbolic_output_item :
-              symbolic_output_buffer -> symbolic_output_item -> unit
-            val formatter_of_symbolic_output_buffer :
-              symbolic_output_buffer -> formatter
-            val pp_print_list :
-              ?pp_sep:(formatter -> unit -> unit) ->
-              (formatter -> 'a -> unit) -> formatter -> 'a list -> unit
-            val pp_print_text : formatter -> tag -> unit
-            val fprintf : formatter -> ('a, formatter, unit) format -> 'a
-            val printf : ('a, formatter, unit) format -> 'a
-            val eprintf : ('a, formatter, unit) format -> 'a
-            val sprintf : ('a, unit, tag) format -> 'a
-            val asprintf : ('a, formatter, unit, tag) format4 -> 'a
-            val ifprintf : formatter -> ('a, formatter, unit) format -> 'a
-            val kfprintf :
-              (formatter -> 'a) ->
-              formatter -> ('b, formatter, unit, 'a) format4 -> 'b
-            val ikfprintf :
-              (formatter -> 'a) ->
-              formatter -> ('b, formatter, unit, 'a) format4 -> 'b
-            val ksprintf : (tag -> 'a) -> ('b, unit, tag, 'a) format4 -> 'b
-            val kasprintf :
-              (tag -> 'a) -> ('b, formatter, unit, 'a) format4 -> 'b
-            val bprintf : Buffer.t -> ('a, formatter, unit) format -> 'a
-            val kprintf : (tag -> 'a) -> ('b, unit, tag, 'a) format4 -> 'b
-            val set_all_formatter_output_functions :
-              out:(tag -> int -> int -> unit) ->
-              flush:(unit -> unit) ->
-              newline:(unit -> unit) -> spaces:(int -> unit) -> unit
-            val get_all_formatter_output_functions :
-              unit ->
-              (tag -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *
-              (int -> unit)
-            val pp_set_all_formatter_output_functions :
-              formatter ->
-              out:(tag -> int -> int -> unit) ->
-              flush:(unit -> unit) ->
-              newline:(unit -> unit) -> spaces:(int -> unit) -> unit
-            val pp_get_all_formatter_output_functions :
-              formatter ->
-              unit ->
-              (tag -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *
-              (int -> unit)
-          end
-        is not included in
-          (module Format)
-       ocamlc src/import/.import.objs/Import.{cmi,cmti} (exit 2)
- (cd _build/default && /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/bin/ocamlc.opt -strict-formats -strict-sequence -principal -w +a-3-4-6-9-40-41-42-44-45-48@50 -short-paths -bin-annot -keep-docs -unboxed-types -noassert -bin-annot -I src/import/.import.objs -I /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/lib/base -I /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/lib/base/caml -I /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/lib/base/shadow_stdlib -I /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/lib/sexplib0 -I /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/lib/stdio -no-alias-deps -o src/import/.import.objs/Import.cmi -c -intf src/import/Import.mli)
- File "src/import/Import.mli", line 16, characters 4-137:
- Error: In this `with' constraint, the new definition of Format
-        does not match its original definition in the constrained signature:
-        Modules do not match:
-          sig
-            type formatter = Format.formatter
-            val pp_open_box : formatter -> int -> unit
-            val open_box : int -> unit
-            val pp_close_box : formatter -> unit -> unit
-            val close_box : unit -> unit
-            val pp_open_hbox : formatter -> unit -> unit
-            val open_hbox : unit -> unit
-            val pp_open_vbox : formatter -> int -> unit
-            val open_vbox : int -> unit
-            val pp_open_hvbox : formatter -> int -> unit
-            val open_hvbox : int -> unit
-            val pp_open_hovbox : formatter -> int -> unit
-            val open_hovbox : int -> unit
-            val pp_print_string : formatter -> string -> unit
-            val print_string : string -> unit
-            val pp_print_as : formatter -> int -> string -> unit
-            val print_as : int -> string -> unit
-            val pp_print_int : formatter -> int -> unit
-            val print_int : int -> unit
-            val pp_print_float : formatter -> float -> unit
-            val print_float : float -> unit
-            val pp_print_char : formatter -> char -> unit
-            val print_char : char -> unit
-            val pp_print_bool : formatter -> bool -> unit
-            val print_bool : bool -> unit
-            val pp_print_space : formatter -> unit -> unit
-            val print_space : unit -> unit
-            val pp_print_cut : formatter -> unit -> unit
-            val print_cut : unit -> unit
-            val pp_print_break : formatter -> int -> int -> unit
-            val print_break : int -> int -> unit
-            val pp_force_newline : formatter -> unit -> unit
-            val force_newline : unit -> unit
-            val pp_print_if_newline : formatter -> unit -> unit
-            val print_if_newline : unit -> unit
-            val pp_print_flush : formatter -> unit -> unit
-            val print_flush : unit -> unit
-            val pp_print_newline : formatter -> unit -> unit
-            val print_newline : unit -> unit
-            val pp_set_margin : formatter -> int -> unit
-            val set_margin : int -> unit
-            val pp_get_margin : formatter -> unit -> int
-            val get_margin : unit -> int
-            val pp_set_max_indent : formatter -> int -> unit
-            val set_max_indent : int -> unit
-            val pp_get_max_indent : formatter -> unit -> int
-            val get_max_indent : unit -> int
-            val pp_set_max_boxes : formatter -> int -> unit
-            val set_max_boxes : int -> unit
-            val pp_get_max_boxes : formatter -> unit -> int
-            val get_max_boxes : unit -> int
-            val pp_over_max_boxes : formatter -> unit -> bool
-            val over_max_boxes : unit -> bool
-            val pp_open_tbox : formatter -> unit -> unit
-            val open_tbox : unit -> unit
-            val pp_close_tbox : formatter -> unit -> unit
-            val close_tbox : unit -> unit
-            val pp_set_tab : formatter -> unit -> unit
-            val set_tab : unit -> unit
-            val pp_print_tab : formatter -> unit -> unit
-            val print_tab : unit -> unit
-            val pp_print_tbreak : formatter -> int -> int -> unit
-            val print_tbreak : int -> int -> unit
-            val pp_set_ellipsis_text : formatter -> string -> unit
-            val set_ellipsis_text : string -> unit
-            val pp_get_ellipsis_text : formatter -> unit -> string
-            val get_ellipsis_text : unit -> string
-            type tag = string
-            val pp_open_tag : formatter -> tag -> unit
-            val open_tag : tag -> unit
-            val pp_close_tag : formatter -> unit -> unit
-            val close_tag : unit -> unit
-            val pp_set_tags : formatter -> bool -> unit
-            val set_tags : bool -> unit
-            val pp_set_print_tags : formatter -> bool -> unit
-            val set_print_tags : bool -> unit
-            val pp_set_mark_tags : formatter -> bool -> unit
-            val set_mark_tags : bool -> unit
-            val pp_get_print_tags : formatter -> unit -> bool
-            val get_print_tags : unit -> bool
-            val pp_get_mark_tags : formatter -> unit -> bool
-            val get_mark_tags : unit -> bool
-            val pp_set_formatter_out_channel :
-              formatter -> out_channel -> unit
-            val set_formatter_out_channel : out_channel -> unit
-            val pp_set_formatter_output_functions :
-              formatter ->
-              (tag -> int -> int -> unit) -> (unit -> unit) -> unit
-            val set_formatter_output_functions :
-              (tag -> int -> int -> unit) -> (unit -> unit) -> unit
-            val pp_get_formatter_output_functions :
-              formatter ->
-              unit -> (tag -> int -> int -> unit) * (unit -> unit)
-            val get_formatter_output_functions :
-              unit -> (tag -> int -> int -> unit) * (unit -> unit)
-            type formatter_out_functions =
-              Format.formatter_out_functions = {
-              out_string : tag -> int -> int -> unit;
-              out_flush : unit -> unit;
-              out_newline : unit -> unit;
-              out_spaces : int -> unit;
-              out_indent : int -> unit;
-            }
-            val pp_set_formatter_out_functions :
-              formatter -> formatter_out_functions -> unit
-            val set_formatter_out_functions : formatter_out_functions -> unit
-            val pp_get_formatter_out_functions :
-              formatter -> unit -> formatter_out_functions
-            val get_formatter_out_functions : unit -> formatter_out_functions
-            type formatter_tag_functions =
-              Format.formatter_tag_functions = {
-              mark_open_tag : tag -> tag;
-              mark_close_tag : tag -> tag;
-              print_open_tag : tag -> unit;
-              print_close_tag : tag -> unit;
-            }
-            val pp_set_formatter_tag_functions :
-              formatter -> formatter_tag_functions -> unit
-            val set_formatter_tag_functions : formatter_tag_functions -> unit
-            val pp_get_formatter_tag_functions :
-              formatter -> unit -> formatter_tag_functions
-            val get_formatter_tag_functions : unit -> formatter_tag_functions
-            val formatter_of_out_channel : out_channel -> formatter
-            val std_formatter : formatter
-            val err_formatter : formatter
-            val formatter_of_buffer : Buffer.t -> formatter
-            val stdbuf : Buffer.t
-            val str_formatter : formatter
-            val flush_str_formatter : unit -> tag
-            val make_formatter :
-              (tag -> int -> int -> unit) -> (unit -> unit) -> formatter
-            val formatter_of_out_functions :
-              formatter_out_functions -> formatter
-            type symbolic_output_item =
-              Format.symbolic_output_item =
-                Output_flush
-              | Output_newline
-              | Output_string of tag
-              | Output_spaces of int
-              | Output_indent of int
-            type symbolic_output_buffer = Format.symbolic_output_buffer
-            val make_symbolic_output_buffer : unit -> symbolic_output_buffer
-            val clear_symbolic_output_buffer : symbolic_output_buffer -> unit
-            val get_symbolic_output_buffer :
-              symbolic_output_buffer -> symbolic_output_item list
-            val flush_symbolic_output_buffer :
-              symbolic_output_buffer -> symbolic_output_item list
-            val add_symbolic_output_item :
-              symbolic_output_buffer -> symbolic_output_item -> unit
-            val formatter_of_symbolic_output_buffer :
-              symbolic_output_buffer -> formatter
-            val pp_print_list :
-              ?pp_sep:(formatter -> unit -> unit) ->
-              (formatter -> 'a -> unit) -> formatter -> 'a list -> unit
-            val pp_print_text : formatter -> tag -> unit
-            val fprintf : formatter -> ('a, formatter, unit) format -> 'a
-            val printf : ('a, formatter, unit) format -> 'a
-            val eprintf : ('a, formatter, unit) format -> 'a
-            val sprintf : ('a, unit, tag) format -> 'a
-            val asprintf : ('a, formatter, unit, tag) format4 -> 'a
-            val ifprintf : formatter -> ('a, formatter, unit) format -> 'a
-            val kfprintf :
-              (formatter -> 'a) ->
-              formatter -> ('b, formatter, unit, 'a) format4 -> 'b
-            val ikfprintf :
-              (formatter -> 'a) ->
-              formatter -> ('b, formatter, unit, 'a) format4 -> 'b
-            val ksprintf : (tag -> 'a) -> ('b, unit, tag, 'a) format4 -> 'b
-            val kasprintf :
-              (tag -> 'a) -> ('b, formatter, unit, 'a) format4 -> 'b
-            val bprintf : Buffer.t -> ('a, formatter, unit) format -> 'a
-            val kprintf : (tag -> 'a) -> ('b, unit, tag, 'a) format4 -> 'b
-            val set_all_formatter_output_functions :
-              out:(tag -> int -> int -> unit) ->
-              flush:(unit -> unit) ->
-              newline:(unit -> unit) -> spaces:(int -> unit) -> unit
-            val get_all_formatter_output_functions :
-              unit ->
-              (tag -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *
-              (int -> unit)
-            val pp_set_all_formatter_output_functions :
-              formatter ->
-              out:(tag -> int -> int -> unit) ->
-              flush:(unit -> unit) ->
-              newline:(unit -> unit) -> spaces:(int -> unit) -> unit
-            val pp_get_all_formatter_output_functions :
-              formatter ->
-              unit ->
-              (tag -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *
-              (int -> unit)
-          end
-        is not included in
-          (module Format)
[ERROR] The compilation of ocamlformat failed at "jbuilder build -p ocamlformat
        -j 4".

#=== ERROR while installing ocamlformat.0.5 ===================================#
# opam-version         1.2.2+dd (3852ba0a7708d4dc37f64dd4cd00f873bf317ac0)
# os                   linux
# command              jbuilder build -p ocamlformat -j 4
# path                 /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/build/ocamlformat.0.5
# compiler             4.07.0+pr2051
# exit-code            1
# env-file             /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/build/ocamlformat.0.5/ocamlformat-29858.env
# stdout-file          /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/build/ocamlformat.0.5/ocamlformat-29858.out
# stderr-file          /home/doligez/opamcheck/sandbox2/opamstate/4.07.0+pr2051/dotopam/4.07.0+pr2051/build/ocamlformat.0.5/ocamlformat-29858.out
### stdout ###
# Error: In this `with' constraint, the new definition of Format
# [...]
#              newline:(unit -> unit) -> spaces:(int -> unit) -> unit
#            val pp_get_all_formatter_output_functions :
#              formatter ->
#              unit ->
#              (tag -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *
#              (int -> unit)
#          end
#        is not included in
#          (module Format)
### stderr ###
# Error: In this `with' constraint, the new definition of Format
# [...]
#              newline:(unit -> unit) -> spaces:(int -> unit) -> unit
#            val pp_get_all_formatter_output_functions :
#              formatter ->
#              unit ->
#              (tag -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *
#              (int -> unit)
#          end
#        is not included in
#          (module Format)



=-=- Error report -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
The following actions failed
  - install ocamlformat 0.5
No changes have been performed
'opam install ocamlformat.0.5' failed.
